// Code generated by go-swagger; DO NOT EDIT.

package embedded_signing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new embedded signing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for embedded signing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV2DocumentsDocumentIDEmbeddedInvites(params *DeleteV2DocumentsDocumentIDEmbeddedInvitesParams) (*DeleteV2DocumentsDocumentIDEmbeddedInvitesOK, error)

	PostV2DocumentsDocumentIDEmbeddedInvites(params *PostV2DocumentsDocumentIDEmbeddedInvitesParams) (*PostV2DocumentsDocumentIDEmbeddedInvitesCreated, error)

	PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLink(params *PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLinkParams) (*PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLinkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteV2DocumentsDocumentIDEmbeddedInvites deletes embedded invites

  asdf
*/
func (a *Client) DeleteV2DocumentsDocumentIDEmbeddedInvites(params *DeleteV2DocumentsDocumentIDEmbeddedInvitesParams) (*DeleteV2DocumentsDocumentIDEmbeddedInvitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV2DocumentsDocumentIDEmbeddedInvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteV2DocumentsDocumentIDEmbeddedInvites",
		Method:             "DELETE",
		PathPattern:        "/v2/documents/{document_id}/embedded-invites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV2DocumentsDocumentIDEmbeddedInvitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV2DocumentsDocumentIDEmbeddedInvitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV2DocumentsDocumentIDEmbeddedInvites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostV2DocumentsDocumentIDEmbeddedInvites embeddeds invites

  create embedded invites
*/
func (a *Client) PostV2DocumentsDocumentIDEmbeddedInvites(params *PostV2DocumentsDocumentIDEmbeddedInvitesParams) (*PostV2DocumentsDocumentIDEmbeddedInvitesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV2DocumentsDocumentIDEmbeddedInvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV2DocumentsDocumentIDEmbeddedInvites",
		Method:             "POST",
		PathPattern:        "/v2/documents/{document_id}/embedded-invites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV2DocumentsDocumentIDEmbeddedInvitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV2DocumentsDocumentIDEmbeddedInvitesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV2DocumentsDocumentIDEmbeddedInvites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLink embeddeds invites link
*/
func (a *Client) PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLink(params *PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLinkParams) (*PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLink",
		Method:             "POST",
		PathPattern:        "/v2/documents/{document_id}/embedded-invites/{fieldInviteUniqueId}/link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV2DocumentsDocumentIDEmbeddedInvitesFieldInviteUniqueIDLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
