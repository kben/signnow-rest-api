// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUserReader is a Reader for the PostUser structure.
type PostUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUserOK creates a PostUserOK with default headers values
func NewPostUserOK() *PostUserOK {
	return &PostUserOK{}
}

/*PostUserOK handles this case with default header values.

PostUserOK post user o k
*/
type PostUserOK struct {
	Payload *PostUserOKBody
}

func (o *PostUserOK) Error() string {
	return fmt.Sprintf("[POST /user][%d] postUserOK  %+v", 200, o.Payload)
}

func (o *PostUserOK) GetPayload() *PostUserOKBody {
	return o.Payload
}

func (o *PostUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserBadRequest creates a PostUserBadRequest with default headers values
func NewPostUserBadRequest() *PostUserBadRequest {
	return &PostUserBadRequest{}
}

/*PostUserBadRequest handles this case with default header values.

* "unverified_email" - email has been registered on site before, but not verified
* "internal api error" - request without a required field in body
* "User with email exists" - email has been registered and verified on site before
* "Invalid payload" - request without body
 */
type PostUserBadRequest struct {
}

func (o *PostUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /user][%d] postUserBadRequest ", 400)
}

func (o *PostUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostUserBody post user body
swagger:model PostUserBody
*/
type PostUserBody struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this post user body
func (o *PostUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUserBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *PostUserBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserBody) UnmarshalBinary(b []byte) error {
	var res PostUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostUserOKBody post user o k body
swagger:model PostUserOKBody
*/
type PostUserOKBody struct {

	// email
	Email string `json:"email,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// verified
	Verified int64 `json:"verified,omitempty"`
}

// Validate validates this post user o k body
func (o *PostUserOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserOKBody) UnmarshalBinary(b []byte) error {
	var res PostUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
