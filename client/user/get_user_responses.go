// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetUserReader is a Reader for the GetUser structure.
type GetUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserOK creates a GetUserOK with default headers values
func NewGetUserOK() *GetUserOK {
	return &GetUserOK{}
}

/*GetUserOK handles this case with default header values.

GetUserOK get user o k
*/
type GetUserOK struct {
	Payload *GetUserOKBody
}

func (o *GetUserOK) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserOK  %+v", 200, o.Payload)
}

func (o *GetUserOK) GetPayload() *GetUserOKBody {
	return o.Payload
}

func (o *GetUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserBadRequest creates a GetUserBadRequest with default headers values
func NewGetUserBadRequest() *GetUserBadRequest {
	return &GetUserBadRequest{}
}

/*GetUserBadRequest handles this case with default header values.

Request with incorrect token
*/
type GetUserBadRequest struct {
}

func (o *GetUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserBadRequest ", 400)
}

func (o *GetUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetUserOKBody get user o k body
swagger:model GetUserOKBody
*/
type GetUserOKBody struct {

	// active
	Active string `json:"active,omitempty"`

	// billing period
	BillingPeriod *GetUserOKBodyBillingPeriod `json:"billing_period,omitempty"`

	// cloud export account details
	CloudExportAccountDetails interface{} `json:"cloud_export_account_details,omitempty"`

	// companies
	Companies []*GetUserOKBodyCompaniesItems0 `json:"companies"`

	// created
	Created string `json:"created,omitempty"`

	// credits
	Credits int64 `json:"credits,omitempty"`

	// document count
	DocumentCount int64 `json:"document_count,omitempty"`

	// emails
	Emails []string `json:"emails"`

	// facebookapps
	Facebookapps bool `json:"facebookapps,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// googleapps
	Googleapps bool `json:"googleapps,omitempty"`

	// has atticus access
	HasAtticusAccess bool `json:"has_atticus_access,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is logged in
	IsLoggedIn bool `json:"is_logged_in,omitempty"`

	// issue notifications
	IssueNotifications []interface{} `json:"issue_notifications"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// lifetime document count
	LifetimeDocumentCount int64 `json:"lifetime_document_count,omitempty"`

	// merchant accounts
	MerchantAccounts []interface{} `json:"merchant_accounts"`

	// monthly document count
	MonthlyDocumentCount string `json:"monthly_document_count,omitempty"`

	// organization
	Organization *GetUserOKBodyOrganization `json:"organization,omitempty"`

	// organization settings
	OrganizationSettings []*GetUserOKBodyOrganizationSettingsItems0 `json:"organization_settings"`

	// premium access
	PremiumAccess *GetUserOKBodyPremiumAccess `json:"premium_access,omitempty"`

	// primary email
	PrimaryEmail string `json:"primary_email,omitempty"`

	// pro
	Pro int64 `json:"pro,omitempty"`

	// registration source
	RegistrationSource string `json:"registration_source,omitempty"`

	// settings
	Settings *GetUserOKBodySettings `json:"settings,omitempty"`

	// status
	Status *GetUserOKBodyStatus `json:"status,omitempty"`

	// subscriptions
	Subscriptions []*GetUserOKBodySubscriptionsItems0 `json:"subscriptions"`

	// teams
	Teams []*GetUserOKBodyTeamsItems0 `json:"teams"`

	// type
	Type int64 `json:"type,omitempty"`
}

// Validate validates this get user o k body
func (o *GetUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompanies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizationSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePremiumAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserOKBody) validateBillingPeriod(formats strfmt.Registry) error {

	if swag.IsZero(o.BillingPeriod) { // not required
		return nil
	}

	if o.BillingPeriod != nil {
		if err := o.BillingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserOK" + "." + "billing_period")
			}
			return err
		}
	}

	return nil
}

func (o *GetUserOKBody) validateCompanies(formats strfmt.Registry) error {

	if swag.IsZero(o.Companies) { // not required
		return nil
	}

	for i := 0; i < len(o.Companies); i++ {
		if swag.IsZero(o.Companies[i]) { // not required
			continue
		}

		if o.Companies[i] != nil {
			if err := o.Companies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUserOK" + "." + "companies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetUserOKBody) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(o.Organization) { // not required
		return nil
	}

	if o.Organization != nil {
		if err := o.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserOK" + "." + "organization")
			}
			return err
		}
	}

	return nil
}

func (o *GetUserOKBody) validateOrganizationSettings(formats strfmt.Registry) error {

	if swag.IsZero(o.OrganizationSettings) { // not required
		return nil
	}

	for i := 0; i < len(o.OrganizationSettings); i++ {
		if swag.IsZero(o.OrganizationSettings[i]) { // not required
			continue
		}

		if o.OrganizationSettings[i] != nil {
			if err := o.OrganizationSettings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUserOK" + "." + "organization_settings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetUserOKBody) validatePremiumAccess(formats strfmt.Registry) error {

	if swag.IsZero(o.PremiumAccess) { // not required
		return nil
	}

	if o.PremiumAccess != nil {
		if err := o.PremiumAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserOK" + "." + "premium_access")
			}
			return err
		}
	}

	return nil
}

func (o *GetUserOKBody) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(o.Settings) { // not required
		return nil
	}

	if o.Settings != nil {
		if err := o.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserOK" + "." + "settings")
			}
			return err
		}
	}

	return nil
}

func (o *GetUserOKBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	if o.Status != nil {
		if err := o.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserOK" + "." + "status")
			}
			return err
		}
	}

	return nil
}

func (o *GetUserOKBody) validateSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(o.Subscriptions) { // not required
		return nil
	}

	for i := 0; i < len(o.Subscriptions); i++ {
		if swag.IsZero(o.Subscriptions[i]) { // not required
			continue
		}

		if o.Subscriptions[i] != nil {
			if err := o.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUserOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetUserOKBody) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(o.Teams) { // not required
		return nil
	}

	for i := 0; i < len(o.Teams); i++ {
		if swag.IsZero(o.Teams[i]) { // not required
			continue
		}

		if o.Teams[i] != nil {
			if err := o.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUserOK" + "." + "teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBody) UnmarshalBinary(b []byte) error {
	var res GetUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyBillingPeriod get user o k body billing period
swagger:model GetUserOKBodyBillingPeriod
*/
type GetUserOKBodyBillingPeriod struct {

	// end date
	EndDate string `json:"end_date,omitempty"`

	// end timestamp
	EndTimestamp int64 `json:"end_timestamp,omitempty"`

	// start date
	StartDate string `json:"start_date,omitempty"`

	// start timestamp
	StartTimestamp int64 `json:"start_timestamp,omitempty"`
}

// Validate validates this get user o k body billing period
func (o *GetUserOKBodyBillingPeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyBillingPeriod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyBillingPeriod) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyBillingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyCompaniesItems0 get user o k body companies items0
swagger:model GetUserOKBodyCompaniesItems0
*/
type GetUserOKBodyCompaniesItems0 struct {

	// full access
	FullAccess bool `json:"full_access,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this get user o k body companies items0
func (o *GetUserOKBodyCompaniesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyCompaniesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyCompaniesItems0) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyCompaniesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyOrganization get user o k body organization
swagger:model GetUserOKBodyOrganization
*/
type GetUserOKBodyOrganization struct {

	// active logo
	ActiveLogo []interface{} `json:"active_logo"`

	// created
	Created string `json:"created,omitempty"`

	// deleted
	Deleted string `json:"deleted,omitempty"`

	// domains
	Domains []interface{} `json:"domains"`

	// id
	ID string `json:"id,omitempty"`

	// is admin
	IsAdmin bool `json:"is_admin,omitempty"`

	// is superadmin
	IsSuperadmin bool `json:"is_superadmin,omitempty"`

	// logos
	Logos []interface{} `json:"logos"`

	// name
	Name string `json:"name,omitempty"`

	// teams
	Teams []interface{} `json:"teams"`

	// updated
	Updated string `json:"updated,omitempty"`
}

// Validate validates this get user o k body organization
func (o *GetUserOKBodyOrganization) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyOrganization) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyOrganization) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyOrganization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyOrganizationSettingsItems0 get user o k body organization settings items0
swagger:model GetUserOKBodyOrganizationSettingsItems0
*/
type GetUserOKBodyOrganizationSettingsItems0 struct {

	// setting
	Setting string `json:"setting,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this get user o k body organization settings items0
func (o *GetUserOKBodyOrganizationSettingsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyOrganizationSettingsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyOrganizationSettingsItems0) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyOrganizationSettingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyPremiumAccess get user o k body premium access
swagger:model GetUserOKBodyPremiumAccess
*/
type GetUserOKBodyPremiumAccess struct {

	// active
	Active bool `json:"active,omitempty"`

	// business
	Business bool `json:"business,omitempty"`

	// credit card
	CreditCard bool `json:"credit_card,omitempty"`

	// error
	Error bool `json:"error,omitempty"`

	// plan
	Plan string `json:"plan,omitempty"`

	// subscription
	Subscription *GetUserOKBodyPremiumAccessSubscription `json:"subscription,omitempty"`

	// trial
	Trial bool `json:"trial,omitempty"`

	// user
	User *GetUserOKBodyPremiumAccessUser `json:"user,omitempty"`
}

// Validate validates this get user o k body premium access
func (o *GetUserOKBodyPremiumAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserOKBodyPremiumAccess) validateSubscription(formats strfmt.Registry) error {

	if swag.IsZero(o.Subscription) { // not required
		return nil
	}

	if o.Subscription != nil {
		if err := o.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserOK" + "." + "premium_access" + "." + "subscription")
			}
			return err
		}
	}

	return nil
}

func (o *GetUserOKBodyPremiumAccess) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserOK" + "." + "premium_access" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyPremiumAccess) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyPremiumAccess) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyPremiumAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyPremiumAccessSubscription get user o k body premium access subscription
swagger:model GetUserOKBodyPremiumAccessSubscription
*/
type GetUserOKBodyPremiumAccessSubscription struct {

	// created at
	CreatedAt int64 `json:"created_at,omitempty"`

	// expired at
	ExpiredAt int64 `json:"expired_at,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// term
	Term int64 `json:"term,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
}

// Validate validates this get user o k body premium access subscription
func (o *GetUserOKBodyPremiumAccessSubscription) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyPremiumAccessSubscription) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyPremiumAccessSubscription) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyPremiumAccessSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyPremiumAccessUser get user o k body premium access user
swagger:model GetUserOKBodyPremiumAccessUser
*/
type GetUserOKBodyPremiumAccessUser struct {

	// added date
	AddedDate int64 `json:"added_date,omitempty"`

	// admin
	Admin string `json:"admin,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this get user o k body premium access user
func (o *GetUserOKBodyPremiumAccessUser) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyPremiumAccessUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyPremiumAccessUser) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyPremiumAccessUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodySettings get user o k body settings
swagger:model GetUserOKBodySettings
*/
type GetUserOKBodySettings struct {

	// add signature stamp
	AddSignatureStamp bool `json:"add_signature_stamp,omitempty"`

	// add signature stamp with name
	AddSignatureStampWithName bool `json:"add_signature_stamp_with_name,omitempty"`

	// audit trail completion retention days
	AuditTrailCompletionRetentionDays bool `json:"audit_trail_completion_retention_days,omitempty"`

	// block export options when credit card validation is used
	BlockExportOptionsWhenCreditCardValidationIsUsed bool `json:"block_export_options_when_credit_card_validation_is_used,omitempty"`

	// block login via social networks
	BlockLoginViaSocialNetworks bool `json:"block_login_via_social_networks,omitempty"`

	// cfr title 21 part 11
	CfrTitle21Part11 bool `json:"cfr_title_21_part_11,omitempty"`

	// cloud auto export
	CloudAutoExport bool `json:"cloud_auto_export,omitempty"`

	// cloud export with history
	CloudExportWithHistory bool `json:"cloud_export_with_history,omitempty"`

	// copy export
	CopyExport bool `json:"copy_export,omitempty"`

	// digitally sign dowloaded docs
	DigitallySignDowloadedDocs bool `json:"digitally_sign_dowloaded_docs,omitempty"`

	// disable email notifications
	DisableEmailNotifications bool `json:"disable_email_notifications,omitempty"`

	// document attachment only for signer
	DocumentAttachmentOnlyForSigner bool `json:"document_attachment_only_for_signer,omitempty"`

	// document completion retention days
	DocumentCompletionRetentionDays bool `json:"document_completion_retention_days,omitempty"`

	// document guide
	DocumentGuide bool `json:"document_guide,omitempty"`

	// document schema extended
	DocumentSchemaExtended bool `json:"document_schema_extended,omitempty"`

	// electronic consent required
	ElectronicConsentRequired bool `json:"electronic_consent_required,omitempty"`

	// electronic consent text
	ElectronicConsentText bool `json:"electronic_consent_text,omitempty"`

	// email admin on banned login
	EmailAdminOnBannedLogin bool `json:"email_admin_on_banned_login,omitempty"`

	// emailed docs include history
	EmailedDocsIncludeHistory bool `json:"emailed_docs_include_history,omitempty"`

	// enable advanced threat protection
	EnableAdvancedThreatProtection bool `json:"enable_advanced_threat_protection,omitempty"`

	// enable full story tracker
	EnableFullStoryTracker bool `json:"enable_full_story_tracker,omitempty"`

	// enable hyperlink protection
	EnableHyperlinkProtection bool `json:"enable_hyperlink_protection,omitempty"`

	// front end session length
	FrontEndSessionLength bool `json:"front_end_session_length,omitempty"`

	// invite completion redirect url
	InviteCompletionRedirectURL bool `json:"invite_completion_redirect_url,omitempty"`

	// invite decline redirect url
	InviteDeclineRedirectURL bool `json:"invite_decline_redirect_url,omitempty"`

	// invite update notifications for all invites at invite create
	InviteUpdateNotificationsForAllInvitesAtInviteCreate bool `json:"invite_update_notifications_for_all_invites_at_invite_create,omitempty"`

	// logout on signing
	LogoutOnSigning bool `json:"logout_on_signing,omitempty"`

	// mobileweb option
	MobilewebOption bool `json:"mobileweb_option,omitempty"`

	// no document attachment
	NoDocumentAttachment bool `json:"no_document_attachment,omitempty"`

	// no document file attachments
	NoDocumentFileAttachments bool `json:"no_document_file_attachments,omitempty"`

	// no user signature return
	NoUserSignatureReturn bool `json:"no_user_signature_return,omitempty"`

	// only administrator is able to invite to the team
	OnlyAdministratorIsAbleToInviteToTheTeam bool `json:"only_administrator_is_able_to_invite_to_the_team,omitempty"`

	// org allowed team admins
	OrgAllowedTeamAdmins bool `json:"org_allowed_team_admins,omitempty"`

	// pending invite document view notification
	PendingInviteDocumentViewNotification bool `json:"pending_invite_document_view_notification,omitempty"`

	// require authentication for invites
	RequireAuthenticationForInvites bool `json:"require_authentication_for_invites,omitempty"`

	// require drawn signatures
	RequireDrawnSignatures bool `json:"require_drawn_signatures,omitempty"`

	// require login for signing
	RequireLoginForSigning bool `json:"require_login_for_signing,omitempty"`

	// required preset signature name
	RequiredPresetSignatureName bool `json:"required_preset_signature_name,omitempty"`

	// restrict download
	RestrictDownload bool `json:"restrict_download,omitempty"`

	// signing link document download
	SigningLinkDocumentDownload bool `json:"signing_link_document_download,omitempty"`

	// sso only login
	SsoOnlyLogin bool `json:"sso-only-login,omitempty"`

	// unsuccessful logout attempts allowed
	UnsuccessfulLogoutAttemptsAllowed bool `json:"unsuccessful_logout_attempts_allowed,omitempty"`

	// upload limit
	UploadLimit bool `json:"upload_limit,omitempty"`

	// watermark downloaded document
	WatermarkDownloadedDocument bool `json:"watermark_downloaded_document,omitempty"`
}

// Validate validates this get user o k body settings
func (o *GetUserOKBodySettings) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodySettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodySettings) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodySettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyStatus get user o k body status
swagger:model GetUserOKBodyStatus
*/
type GetUserOKBodyStatus struct {

	// bad cloud export token
	BadCloudExportToken bool `json:"bad_cloud_export_token,omitempty"`

	// bad copy token
	BadCopyToken bool `json:"bad_copy_token,omitempty"`

	// has cloud export token
	HasCloudExportToken bool `json:"has_cloud_export_token,omitempty"`

	// has copy token
	HasCopyToken bool `json:"has_copy_token,omitempty"`

	// has salesforce token
	HasSalesforceToken bool `json:"has_salesforce_token,omitempty"`
}

// Validate validates this get user o k body status
func (o *GetUserOKBodyStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyStatus) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyStatus) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodySubscriptionsItems0 get user o k body subscriptions items0
swagger:model GetUserOKBodySubscriptionsItems0
*/
type GetUserOKBodySubscriptionsItems0 struct {

	// created
	Created int64 `json:"created,omitempty"`

	// credit card
	CreditCard bool `json:"credit_card,omitempty"`

	// expired
	Expired int64 `json:"expired,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// mobile plan type
	MobilePlanType string `json:"mobile_plan_type,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// plan
	Plan string `json:"plan,omitempty"`

	// subscription id
	SubscriptionID string `json:"subscription_id,omitempty"`

	// term
	Term int64 `json:"term,omitempty"`

	// trial
	Trial bool `json:"trial,omitempty"`

	// updated
	Updated int64 `json:"updated,omitempty"`
}

// Validate validates this get user o k body subscriptions items0
func (o *GetUserOKBodySubscriptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodySubscriptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodySubscriptionsItems0) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodySubscriptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyTeamsItems0 get user o k body teams items0
swagger:model GetUserOKBodyTeamsItems0
*/
type GetUserOKBodyTeamsItems0 struct {

	// admins
	Admins []*GetUserOKBodyTeamsItems0AdminsItems0 `json:"admins"`

	// created since
	CreatedSince string `json:"created_since,omitempty"`

	// document count
	DocumentCount int64 `json:"document_count,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// team
	Team string `json:"team,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get user o k body teams items0
func (o *GetUserOKBodyTeamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdmins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserOKBodyTeamsItems0) validateAdmins(formats strfmt.Registry) error {

	if swag.IsZero(o.Admins) { // not required
		return nil
	}

	for i := 0; i < len(o.Admins); i++ {
		if swag.IsZero(o.Admins[i]) { // not required
			continue
		}

		if o.Admins[i] != nil {
			if err := o.Admins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("admins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyTeamsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyTeamsItems0) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyTeamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserOKBodyTeamsItems0AdminsItems0 get user o k body teams items0 admins items0
swagger:model GetUserOKBodyTeamsItems0AdminsItems0
*/
type GetUserOKBodyTeamsItems0AdminsItems0 struct {

	// billing
	Billing int64 `json:"billing,omitempty"`

	// document access
	DocumentAccess int64 `json:"document_access,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is secondary
	IsSecondary string `json:"is_secondary,omitempty"`

	// primary
	Primary bool `json:"primary,omitempty"`
}

// Validate validates this get user o k body teams items0 admins items0
func (o *GetUserOKBodyTeamsItems0AdminsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserOKBodyTeamsItems0AdminsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserOKBodyTeamsItems0AdminsItems0) UnmarshalBinary(b []byte) error {
	var res GetUserOKBodyTeamsItems0AdminsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
