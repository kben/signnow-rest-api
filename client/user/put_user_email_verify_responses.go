// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutUserEmailVerifyReader is a Reader for the PutUserEmailVerify structure.
type PutUserEmailVerifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserEmailVerifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserEmailVerifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUserEmailVerifyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutUserEmailVerifyOK creates a PutUserEmailVerifyOK with default headers values
func NewPutUserEmailVerifyOK() *PutUserEmailVerifyOK {
	return &PutUserEmailVerifyOK{}
}

/*PutUserEmailVerifyOK handles this case with default header values.

PutUserEmailVerifyOK put user email verify o k
*/
type PutUserEmailVerifyOK struct {
	Payload *PutUserEmailVerifyOKBody
}

func (o *PutUserEmailVerifyOK) Error() string {
	return fmt.Sprintf("[PUT /user/email/verify][%d] putUserEmailVerifyOK  %+v", 200, o.Payload)
}

func (o *PutUserEmailVerifyOK) GetPayload() *PutUserEmailVerifyOKBody {
	return o.Payload
}

func (o *PutUserEmailVerifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutUserEmailVerifyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserEmailVerifyBadRequest creates a PutUserEmailVerifyBadRequest with default headers values
func NewPutUserEmailVerifyBadRequest() *PutUserEmailVerifyBadRequest {
	return &PutUserEmailVerifyBadRequest{}
}

/*PutUserEmailVerifyBadRequest handles this case with default header values.

PutUserEmailVerifyBadRequest put user email verify bad request
*/
type PutUserEmailVerifyBadRequest struct {
}

func (o *PutUserEmailVerifyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /user/email/verify][%d] putUserEmailVerifyBadRequest ", 400)
}

func (o *PutUserEmailVerifyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PutUserEmailVerifyBody put user email verify body
swagger:model PutUserEmailVerifyBody
*/
type PutUserEmailVerifyBody struct {

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// verification token
	// Required: true
	VerificationToken *string `json:"verification_token"`
}

// Validate validates this put user email verify body
func (o *PutUserEmailVerifyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVerificationToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutUserEmailVerifyBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PutUserEmailVerifyBody) validateVerificationToken(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"verification_token", "body", o.VerificationToken); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutUserEmailVerifyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserEmailVerifyBody) UnmarshalBinary(b []byte) error {
	var res PutUserEmailVerifyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutUserEmailVerifyOKBody put user email verify o k body
swagger:model PutUserEmailVerifyOKBody
*/
type PutUserEmailVerifyOKBody struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`
}

// Validate validates this put user email verify o k body
func (o *PutUserEmailVerifyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutUserEmailVerifyOKBody) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("putUserEmailVerifyOK"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutUserEmailVerifyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserEmailVerifyOKBody) UnmarshalBinary(b []byte) error {
	var res PutUserEmailVerifyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
