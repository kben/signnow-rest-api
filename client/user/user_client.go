// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetUser(params *GetUserParams) (*GetUserOK, error)

	GetUserDocuments(params *GetUserDocumentsParams) (*GetUserDocumentsOK, error)

	GetUserDocumentsv2(params *GetUserDocumentsv2Params) (*GetUserDocumentsv2OK, error)

	PostUser(params *PostUserParams) (*PostUserOK, error)

	PostUserForgotpassword(params *PostUserForgotpasswordParams) (*PostUserForgotpasswordOK, error)

	PostUserVerifyemail(params *PostUserVerifyemailParams) (*PostUserVerifyemailOK, error)

	PutUser(params *PutUserParams) (*PutUserOK, error)

	PutUserEmailVerify(params *PutUserEmailVerifyParams) (*PutUserEmailVerifyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetUser gets user info

  Returns a user resource
*/
func (a *Client) GetUser(params *GetUserParams) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserDocuments gets user documents

  Returns information of user's documents that were not modified yet.
*/
func (a *Client) GetUserDocuments(params *GetUserDocumentsParams) (*GetUserDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserDocumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserDocuments",
		Method:             "GET",
		PathPattern:        "/user/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserDocumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserDocuments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserDocumentsv2 gets modified documents

  Returns an array of user's documents that were modified (added fields, texts, signatures, etc.)
*/
func (a *Client) GetUserDocumentsv2(params *GetUserDocumentsv2Params) (*GetUserDocumentsv2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserDocumentsv2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserDocumentsv2",
		Method:             "GET",
		PathPattern:        "/user/documentsv2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserDocumentsv2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserDocumentsv2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserDocumentsv2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUser creates user

  Creates an account for a user
*/
func (a *Client) PostUser(params *PostUserParams) (*PostUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserForgotpassword resets password

  Sends password reset link via email
*/
func (a *Client) PostUserForgotpassword(params *PostUserForgotpasswordParams) (*PostUserForgotpasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserForgotpasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUserForgotpassword",
		Method:             "POST",
		PathPattern:        "/user/forgotpassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserForgotpasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserForgotpasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserForgotpassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserVerifyemail sends verification email

  Sends verification email to a user
*/
func (a *Client) PostUserVerifyemail(params *PostUserVerifyemailParams) (*PostUserVerifyemailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserVerifyemailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUserVerifyemail",
		Method:             "POST",
		PathPattern:        "/user/verifyemail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserVerifyemailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserVerifyemailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserVerifyemail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUser changes user details

  Updates user informaition i.e. first name, last name
*/
func (a *Client) PutUser(params *PutUserParams) (*PutUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUser",
		Method:             "PUT",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUserEmailVerify verifies email

  Verifies user's email address using code from verification email
*/
func (a *Client) PutUserEmailVerify(params *PutUserEmailVerifyParams) (*PutUserEmailVerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserEmailVerifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUserEmailVerify",
		Method:             "PUT",
		PathPattern:        "/user/email/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserEmailVerifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserEmailVerifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUserEmailVerify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
