// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutUserEmailVerifyParams creates a new PutUserEmailVerifyParams object
// with the default values initialized.
func NewPutUserEmailVerifyParams() *PutUserEmailVerifyParams {
	var (
		authorizationDefault = string("Basic {{encoded_client_credentials}}")
		contentTypeDefault   = string("application/json")
	)
	return &PutUserEmailVerifyParams{
		Authorization: authorizationDefault,
		ContentType:   &contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPutUserEmailVerifyParamsWithTimeout creates a new PutUserEmailVerifyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutUserEmailVerifyParamsWithTimeout(timeout time.Duration) *PutUserEmailVerifyParams {
	var (
		authorizationDefault = string("Basic {{encoded_client_credentials}}")
		contentTypeDefault   = string("application/json")
	)
	return &PutUserEmailVerifyParams{
		Authorization: authorizationDefault,
		ContentType:   &contentTypeDefault,

		timeout: timeout,
	}
}

// NewPutUserEmailVerifyParamsWithContext creates a new PutUserEmailVerifyParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutUserEmailVerifyParamsWithContext(ctx context.Context) *PutUserEmailVerifyParams {
	var (
		authorizationDefault = string("Basic {{encoded_client_credentials}}")
		contentTypeDefault   = string("application/json")
	)
	return &PutUserEmailVerifyParams{
		Authorization: authorizationDefault,
		ContentType:   &contentTypeDefault,

		Context: ctx,
	}
}

// NewPutUserEmailVerifyParamsWithHTTPClient creates a new PutUserEmailVerifyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutUserEmailVerifyParamsWithHTTPClient(client *http.Client) *PutUserEmailVerifyParams {
	var (
		authorizationDefault = string("Basic {{encoded_client_credentials}}")
		contentTypeDefault   = string("application/json")
	)
	return &PutUserEmailVerifyParams{
		Authorization: authorizationDefault,
		ContentType:   &contentTypeDefault,
		HTTPClient:    client,
	}
}

/*PutUserEmailVerifyParams contains all the parameters to send to the API endpoint
for the put user email verify operation typically these are written to a http.Request
*/
type PutUserEmailVerifyParams struct {

	/*Authorization
	  'Basic' followed by base64 encoded client credentials.

	*/
	Authorization string
	/*ContentType*/
	ContentType *string
	/*Body*/
	Body PutUserEmailVerifyBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put user email verify params
func (o *PutUserEmailVerifyParams) WithTimeout(timeout time.Duration) *PutUserEmailVerifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put user email verify params
func (o *PutUserEmailVerifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put user email verify params
func (o *PutUserEmailVerifyParams) WithContext(ctx context.Context) *PutUserEmailVerifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put user email verify params
func (o *PutUserEmailVerifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put user email verify params
func (o *PutUserEmailVerifyParams) WithHTTPClient(client *http.Client) *PutUserEmailVerifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put user email verify params
func (o *PutUserEmailVerifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the put user email verify params
func (o *PutUserEmailVerifyParams) WithAuthorization(authorization string) *PutUserEmailVerifyParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the put user email verify params
func (o *PutUserEmailVerifyParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithContentType adds the contentType to the put user email verify params
func (o *PutUserEmailVerifyParams) WithContentType(contentType *string) *PutUserEmailVerifyParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the put user email verify params
func (o *PutUserEmailVerifyParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithBody adds the body to the put user email verify params
func (o *PutUserEmailVerifyParams) WithBody(body PutUserEmailVerifyBody) *PutUserEmailVerifyParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put user email verify params
func (o *PutUserEmailVerifyParams) SetBody(body PutUserEmailVerifyBody) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PutUserEmailVerifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}

	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
