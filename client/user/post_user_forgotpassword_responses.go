// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUserForgotpasswordReader is a Reader for the PostUserForgotpassword structure.
type PostUserForgotpasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUserForgotpasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUserForgotpasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUserForgotpasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUserForgotpasswordOK creates a PostUserForgotpasswordOK with default headers values
func NewPostUserForgotpasswordOK() *PostUserForgotpasswordOK {
	return &PostUserForgotpasswordOK{}
}

/*PostUserForgotpasswordOK handles this case with default header values.

PostUserForgotpasswordOK post user forgotpassword o k
*/
type PostUserForgotpasswordOK struct {
	Payload interface{}
}

func (o *PostUserForgotpasswordOK) Error() string {
	return fmt.Sprintf("[POST /user/forgotpassword][%d] postUserForgotpasswordOK  %+v", 200, o.Payload)
}

func (o *PostUserForgotpasswordOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PostUserForgotpasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserForgotpasswordBadRequest creates a PostUserForgotpasswordBadRequest with default headers values
func NewPostUserForgotpasswordBadRequest() *PostUserForgotpasswordBadRequest {
	return &PostUserForgotpasswordBadRequest{}
}

/*PostUserForgotpasswordBadRequest handles this case with default header values.

Request with incorrect or mising email
*/
type PostUserForgotpasswordBadRequest struct {
}

func (o *PostUserForgotpasswordBadRequest) Error() string {
	return fmt.Sprintf("[POST /user/forgotpassword][%d] postUserForgotpasswordBadRequest ", 400)
}

func (o *PostUserForgotpasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostUserForgotpasswordBody post user forgotpassword body
swagger:model PostUserForgotpasswordBody
*/
type PostUserForgotpasswordBody struct {

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`
}

// Validate validates this post user forgotpassword body
func (o *PostUserForgotpasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUserForgotpasswordBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostUserForgotpasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserForgotpasswordBody) UnmarshalBinary(b []byte) error {
	var res PostUserForgotpasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
