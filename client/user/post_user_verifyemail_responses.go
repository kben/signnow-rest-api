// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUserVerifyemailReader is a Reader for the PostUserVerifyemail structure.
type PostUserVerifyemailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUserVerifyemailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUserVerifyemailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUserVerifyemailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUserVerifyemailOK creates a PostUserVerifyemailOK with default headers values
func NewPostUserVerifyemailOK() *PostUserVerifyemailOK {
	return &PostUserVerifyemailOK{}
}

/*PostUserVerifyemailOK handles this case with default header values.

PostUserVerifyemailOK post user verifyemail o k
*/
type PostUserVerifyemailOK struct {
	Payload *PostUserVerifyemailOKBody
}

func (o *PostUserVerifyemailOK) Error() string {
	return fmt.Sprintf("[POST /user/verifyemail][%d] postUserVerifyemailOK  %+v", 200, o.Payload)
}

func (o *PostUserVerifyemailOK) GetPayload() *PostUserVerifyemailOKBody {
	return o.Payload
}

func (o *PostUserVerifyemailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostUserVerifyemailOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserVerifyemailBadRequest creates a PostUserVerifyemailBadRequest with default headers values
func NewPostUserVerifyemailBadRequest() *PostUserVerifyemailBadRequest {
	return &PostUserVerifyemailBadRequest{}
}

/*PostUserVerifyemailBadRequest handles this case with default header values.

* "Could not send verification email" - request  with not existing email address
* "User email is already verified" - request with already verified email address
 */
type PostUserVerifyemailBadRequest struct {
}

func (o *PostUserVerifyemailBadRequest) Error() string {
	return fmt.Sprintf("[POST /user/verifyemail][%d] postUserVerifyemailBadRequest ", 400)
}

func (o *PostUserVerifyemailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostUserVerifyemailBody post user verifyemail body
swagger:model PostUserVerifyemailBody
*/
type PostUserVerifyemailBody struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`
}

// Validate validates this post user verifyemail body
func (o *PostUserVerifyemailBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUserVerifyemailBody) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostUserVerifyemailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserVerifyemailBody) UnmarshalBinary(b []byte) error {
	var res PostUserVerifyemailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostUserVerifyemailOKBody post user verifyemail o k body
swagger:model PostUserVerifyemailOKBody
*/
type PostUserVerifyemailOKBody struct {

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this post user verifyemail o k body
func (o *PostUserVerifyemailOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserVerifyemailOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserVerifyemailOKBody) UnmarshalBinary(b []byte) error {
	var res PostUserVerifyemailOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
