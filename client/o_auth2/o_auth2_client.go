// Code generated by go-swagger; DO NOT EDIT.

package o_auth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new o auth2 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for o auth2 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetOauth2Token(params *GetOauth2TokenParams) (*GetOauth2TokenOK, error)

	PostOauth2Token(params *PostOauth2TokenParams) (*PostOauth2TokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetOauth2Token verifies access token

  Verify an access token for a user
*/
func (a *Client) GetOauth2Token(params *GetOauth2TokenParams) (*GetOauth2TokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOauth2TokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOauth2Token",
		Method:             "GET",
		PathPattern:        "/oauth2/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOauth2TokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOauth2TokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOauth2Token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostOauth2Token generates access token

  Returns an access token for a user
*/
func (a *Client) PostOauth2Token(params *PostOauth2TokenParams) (*PostOauth2TokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOauth2TokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOauth2Token",
		Method:             "POST",
		PathPattern:        "/oauth2/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOauth2TokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOauth2TokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOauth2Token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
