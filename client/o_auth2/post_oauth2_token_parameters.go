// Code generated by go-swagger; DO NOT EDIT.

package o_auth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostOauth2TokenParams creates a new PostOauth2TokenParams object
// with the default values initialized.
func NewPostOauth2TokenParams() *PostOauth2TokenParams {
	var (
		authorizationDefault = string("Basic {{basic_authorization_token}}")
		codeDefault          = string("{{authorization_code}}")
		grantTypeDefault     = string("password")
		refreshTokenDefault  = string("{{refresh_token}}")
		scopeDefault         = string("*")
	)
	return &PostOauth2TokenParams{
		Authorization: authorizationDefault,
		Code:          &codeDefault,
		GrantType:     grantTypeDefault,
		RefreshToken:  &refreshTokenDefault,
		Scope:         &scopeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostOauth2TokenParamsWithTimeout creates a new PostOauth2TokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostOauth2TokenParamsWithTimeout(timeout time.Duration) *PostOauth2TokenParams {
	var (
		authorizationDefault = string("Basic {{basic_authorization_token}}")
		codeDefault          = string("{{authorization_code}}")
		grantTypeDefault     = string("password")
		refreshTokenDefault  = string("{{refresh_token}}")
		scopeDefault         = string("*")
	)
	return &PostOauth2TokenParams{
		Authorization: authorizationDefault,
		Code:          &codeDefault,
		GrantType:     grantTypeDefault,
		RefreshToken:  &refreshTokenDefault,
		Scope:         &scopeDefault,

		timeout: timeout,
	}
}

// NewPostOauth2TokenParamsWithContext creates a new PostOauth2TokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostOauth2TokenParamsWithContext(ctx context.Context) *PostOauth2TokenParams {
	var (
		authorizationDefault = string("Basic {{basic_authorization_token}}")
		codeDefault          = string("{{authorization_code}}")
		grantTypeDefault     = string("password")
		refreshTokenDefault  = string("{{refresh_token}}")
		scopeDefault         = string("*")
	)
	return &PostOauth2TokenParams{
		Authorization: authorizationDefault,
		Code:          &codeDefault,
		GrantType:     grantTypeDefault,
		RefreshToken:  &refreshTokenDefault,
		Scope:         &scopeDefault,

		Context: ctx,
	}
}

// NewPostOauth2TokenParamsWithHTTPClient creates a new PostOauth2TokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostOauth2TokenParamsWithHTTPClient(client *http.Client) *PostOauth2TokenParams {
	var (
		authorizationDefault = string("Basic {{basic_authorization_token}}")
		codeDefault          = string("{{authorization_code}}")
		grantTypeDefault     = string("password")
		refreshTokenDefault  = string("{{refresh_token}}")
		scopeDefault         = string("*")
	)
	return &PostOauth2TokenParams{
		Authorization: authorizationDefault,
		Code:          &codeDefault,
		GrantType:     grantTypeDefault,
		RefreshToken:  &refreshTokenDefault,
		Scope:         &scopeDefault,
		HTTPClient:    client,
	}
}

/*PostOauth2TokenParams contains all the parameters to send to the API endpoint
for the post oauth2 token operation typically these are written to a http.Request
*/
type PostOauth2TokenParams struct {

	/*Authorization
	  The word "Basic" followed by Basic Authorization Token

	*/
	Authorization string
	/*Code
	  required if `'grant_type: authorization_code'`

	*/
	Code *string
	/*ExpirationTime
	  the amount of time till the token expires in seconds.

	*/
	ExpirationTime *string
	/*GrantType
	  can be `'password'`, `'refresh_token'`, `'authorization_code'`

	*/
	GrantType string
	/*Password
	  user's password;<br>
	required if `'grant_type: password'`

	*/
	Password string
	/*RefreshToken
	  required if `'grant_type: refresh_token'`

	*/
	RefreshToken *string
	/*Scope*/
	Scope *string
	/*Username
	  user's email; <br>
	required if `'grant_type: password'`

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post oauth2 token params
func (o *PostOauth2TokenParams) WithTimeout(timeout time.Duration) *PostOauth2TokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post oauth2 token params
func (o *PostOauth2TokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post oauth2 token params
func (o *PostOauth2TokenParams) WithContext(ctx context.Context) *PostOauth2TokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post oauth2 token params
func (o *PostOauth2TokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post oauth2 token params
func (o *PostOauth2TokenParams) WithHTTPClient(client *http.Client) *PostOauth2TokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post oauth2 token params
func (o *PostOauth2TokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the post oauth2 token params
func (o *PostOauth2TokenParams) WithAuthorization(authorization string) *PostOauth2TokenParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the post oauth2 token params
func (o *PostOauth2TokenParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCode adds the code to the post oauth2 token params
func (o *PostOauth2TokenParams) WithCode(code *string) *PostOauth2TokenParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the post oauth2 token params
func (o *PostOauth2TokenParams) SetCode(code *string) {
	o.Code = code
}

// WithExpirationTime adds the expirationTime to the post oauth2 token params
func (o *PostOauth2TokenParams) WithExpirationTime(expirationTime *string) *PostOauth2TokenParams {
	o.SetExpirationTime(expirationTime)
	return o
}

// SetExpirationTime adds the expirationTime to the post oauth2 token params
func (o *PostOauth2TokenParams) SetExpirationTime(expirationTime *string) {
	o.ExpirationTime = expirationTime
}

// WithGrantType adds the grantType to the post oauth2 token params
func (o *PostOauth2TokenParams) WithGrantType(grantType string) *PostOauth2TokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the post oauth2 token params
func (o *PostOauth2TokenParams) SetGrantType(grantType string) {
	o.GrantType = grantType
}

// WithPassword adds the password to the post oauth2 token params
func (o *PostOauth2TokenParams) WithPassword(password string) *PostOauth2TokenParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the post oauth2 token params
func (o *PostOauth2TokenParams) SetPassword(password string) {
	o.Password = password
}

// WithRefreshToken adds the refreshToken to the post oauth2 token params
func (o *PostOauth2TokenParams) WithRefreshToken(refreshToken *string) *PostOauth2TokenParams {
	o.SetRefreshToken(refreshToken)
	return o
}

// SetRefreshToken adds the refreshToken to the post oauth2 token params
func (o *PostOauth2TokenParams) SetRefreshToken(refreshToken *string) {
	o.RefreshToken = refreshToken
}

// WithScope adds the scope to the post oauth2 token params
func (o *PostOauth2TokenParams) WithScope(scope *string) *PostOauth2TokenParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the post oauth2 token params
func (o *PostOauth2TokenParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithUsername adds the username to the post oauth2 token params
func (o *PostOauth2TokenParams) WithUsername(username string) *PostOauth2TokenParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the post oauth2 token params
func (o *PostOauth2TokenParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *PostOauth2TokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Code != nil {

		// form param code
		var frCode string
		if o.Code != nil {
			frCode = *o.Code
		}
		fCode := frCode
		if fCode != "" {
			if err := r.SetFormParam("code", fCode); err != nil {
				return err
			}
		}

	}

	if o.ExpirationTime != nil {

		// form param expiration_time
		var frExpirationTime string
		if o.ExpirationTime != nil {
			frExpirationTime = *o.ExpirationTime
		}
		fExpirationTime := frExpirationTime
		if fExpirationTime != "" {
			if err := r.SetFormParam("expiration_time", fExpirationTime); err != nil {
				return err
			}
		}

	}

	// form param grant_type
	frGrantType := o.GrantType
	fGrantType := frGrantType
	if fGrantType != "" {
		if err := r.SetFormParam("grant_type", fGrantType); err != nil {
			return err
		}
	}

	// form param password
	frPassword := o.Password
	fPassword := frPassword
	if fPassword != "" {
		if err := r.SetFormParam("password", fPassword); err != nil {
			return err
		}
	}

	if o.RefreshToken != nil {

		// form param refresh_token
		var frRefreshToken string
		if o.RefreshToken != nil {
			frRefreshToken = *o.RefreshToken
		}
		fRefreshToken := frRefreshToken
		if fRefreshToken != "" {
			if err := r.SetFormParam("refresh_token", fRefreshToken); err != nil {
				return err
			}
		}

	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}

	}

	// form param username
	frUsername := o.Username
	fUsername := frUsername
	if fUsername != "" {
		if err := r.SetFormParam("username", fUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
