// Code generated by go-swagger; DO NOT EDIT.

package webhooks_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhooks 2 0 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhooks 2 0 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2EventsEventSubscriptionID(params *DeleteAPIV2EventsEventSubscriptionIDParams) (*DeleteAPIV2EventsEventSubscriptionIDNoContent, error)

	GetAPIV2Events(params *GetAPIV2EventsParams) (*GetAPIV2EventsOK, error)

	PostAPIV2Events(params *PostAPIV2EventsParams) (*PostAPIV2EventsNoContent, error)

	PutAPIV2EventsEventSubscriptionID(params *PutAPIV2EventsEventSubscriptionIDParams) (*PutAPIV2EventsEventSubscriptionIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIV2EventsEventSubscriptionID deletes event subscription

  Unsubscribes an external service (callback_url) from specific events of user or document
*/
func (a *Client) DeleteAPIV2EventsEventSubscriptionID(params *DeleteAPIV2EventsEventSubscriptionIDParams) (*DeleteAPIV2EventsEventSubscriptionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2EventsEventSubscriptionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV2EventsEventSubscriptionID",
		Method:             "DELETE",
		PathPattern:        "/api/v2/events/{event_subscription_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV2EventsEventSubscriptionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2EventsEventSubscriptionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2EventsEventSubscriptionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2Events gets event suscriptions

  Gets information about all subscriptions to events made with a specific application
*/
func (a *Client) GetAPIV2Events(params *GetAPIV2EventsParams) (*GetAPIV2EventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2EventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV2Events",
		Method:             "GET",
		PathPattern:        "/api/v2/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2EventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2EventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2Events creates event subscription

  Allows to subscribe an external service(callback_url) to a specific event of user or document
*/
func (a *Client) PostAPIV2Events(params *PostAPIV2EventsParams) (*PostAPIV2EventsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2EventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV2Events",
		Method:             "POST",
		PathPattern:        "/api/v2/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2EventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2EventsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV2EventsEventSubscriptionID updates event subscription

  Allows changing an existing event subscription
*/
func (a *Client) PutAPIV2EventsEventSubscriptionID(params *PutAPIV2EventsEventSubscriptionIDParams) (*PutAPIV2EventsEventSubscriptionIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2EventsEventSubscriptionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIV2EventsEventSubscriptionID",
		Method:             "PUT",
		PathPattern:        "/api/v2/events/{event_subscription_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV2EventsEventSubscriptionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV2EventsEventSubscriptionIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV2EventsEventSubscriptionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
