// Code generated by go-swagger; DO NOT EDIT.

package webhooks_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostAPIV2EventsReader is a Reader for the PostAPIV2Events structure.
type PostAPIV2EventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAPIV2EventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostAPIV2EventsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAPIV2EventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAPIV2EventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostAPIV2EventsNoContent creates a PostAPIV2EventsNoContent with default headers values
func NewPostAPIV2EventsNoContent() *PostAPIV2EventsNoContent {
	return &PostAPIV2EventsNoContent{}
}

/*PostAPIV2EventsNoContent handles this case with default header values.

PostAPIV2EventsNoContent post Api v2 events no content
*/
type PostAPIV2EventsNoContent struct {
	Payload interface{}
}

func (o *PostAPIV2EventsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v2/events][%d] postApiV2EventsNoContent  %+v", 204, o.Payload)
}

func (o *PostAPIV2EventsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PostAPIV2EventsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAPIV2EventsBadRequest creates a PostAPIV2EventsBadRequest with default headers values
func NewPostAPIV2EventsBadRequest() *PostAPIV2EventsBadRequest {
	return &PostAPIV2EventsBadRequest{}
}

/*PostAPIV2EventsBadRequest handles this case with default header values.

* "attributes must not be empty" - "attributes" array is missing or empty
* "'callback' is missing." -  required parameter "callback" is missing
* "Action must be equal 'callback'" - required parameter "action" is missing OR value of "action" parameter differs from 'callback'
* "event must not be empty" - required parameter "event" is missing or has an empty value
* "event must be string" - value of the "event" parameter is not a string
* "callback must be string" - value of the "callback" parameter is not a string
* "callback must be url" - value of "callback" parameter is not an URL
* "Invalid integration id - {integration_id}" - value of "integration_id" parameter doesn't exist in database
 */
type PostAPIV2EventsBadRequest struct {
}

func (o *PostAPIV2EventsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/events][%d] postApiV2EventsBadRequest ", 400)
}

func (o *PostAPIV2EventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAPIV2EventsForbidden creates a PostAPIV2EventsForbidden with default headers values
func NewPostAPIV2EventsForbidden() *PostAPIV2EventsForbidden {
	return &PostAPIV2EventsForbidden{}
}

/*PostAPIV2EventsForbidden handles this case with default header values.

**Authorization =  bearer**

Request is sent with bearer token which doesn't belong user who is added to "entity_id" parameter

OR

Request is sent with bearer of user who is not an owner of document, added to "entity_id" parameter


**Authorization =  basic**

Correct request which is sent by application which is not in scope of allowed ones
*/
type PostAPIV2EventsForbidden struct {
}

func (o *PostAPIV2EventsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/events][%d] postApiV2EventsForbidden ", 403)
}

func (o *PostAPIV2EventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostAPIV2EventsBody post API v2 events body
swagger:model PostAPIV2EventsBody
*/
type PostAPIV2EventsBody struct {

	// action
	Action string `json:"action,omitempty"`

	// attributes
	Attributes *PostAPIV2EventsParamsBodyAttributes `json:"attributes,omitempty"`

	// entity id
	// Required: true
	EntityID *string `json:"entity_id"`

	// event
	// Required: true
	Event *string `json:"event"`
}

// Validate validates this post API v2 events body
func (o *PostAPIV2EventsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAPIV2EventsBody) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

func (o *PostAPIV2EventsBody) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"entity_id", "body", o.EntityID); err != nil {
		return err
	}

	return nil
}

func (o *PostAPIV2EventsBody) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"event", "body", o.Event); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostAPIV2EventsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAPIV2EventsBody) UnmarshalBinary(b []byte) error {
	var res PostAPIV2EventsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAPIV2EventsParamsBodyAttributes post API v2 events params body attributes
swagger:model PostAPIV2EventsParamsBodyAttributes
*/
type PostAPIV2EventsParamsBodyAttributes struct {

	// callback
	// Required: true
	Callback *string `json:"callback"`

	// docid queryparam
	DocidQueryparam bool `json:"docid_queryparam,omitempty"`

	// headers
	Headers *PostAPIV2EventsParamsBodyAttributesHeaders `json:"headers,omitempty"`

	// integration id
	IntegrationID string `json:"integration_id,omitempty"`

	// use tls 12
	UseTLS12 bool `json:"use_tls_12,omitempty"`
}

// Validate validates this post API v2 events params body attributes
func (o *PostAPIV2EventsParamsBodyAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCallback(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAPIV2EventsParamsBodyAttributes) validateCallback(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"attributes"+"."+"callback", "body", o.Callback); err != nil {
		return err
	}

	return nil
}

func (o *PostAPIV2EventsParamsBodyAttributes) validateHeaders(formats strfmt.Registry) error {

	if swag.IsZero(o.Headers) { // not required
		return nil
	}

	if o.Headers != nil {
		if err := o.Headers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attributes" + "." + "headers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostAPIV2EventsParamsBodyAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAPIV2EventsParamsBodyAttributes) UnmarshalBinary(b []byte) error {
	var res PostAPIV2EventsParamsBodyAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAPIV2EventsParamsBodyAttributesHeaders post API v2 events params body attributes headers
swagger:model PostAPIV2EventsParamsBodyAttributesHeaders
*/
type PostAPIV2EventsParamsBodyAttributesHeaders struct {

	// bool head
	BoolHead bool `json:"bool_head,omitempty"`

	// float head
	FloatHead float64 `json:"float_head,omitempty"`

	// int head
	IntHead int64 `json:"int_head,omitempty"`

	// string head
	StringHead string `json:"string_head,omitempty"`
}

// Validate validates this post API v2 events params body attributes headers
func (o *PostAPIV2EventsParamsBodyAttributesHeaders) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAPIV2EventsParamsBodyAttributesHeaders) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAPIV2EventsParamsBodyAttributesHeaders) UnmarshalBinary(b []byte) error {
	var res PostAPIV2EventsParamsBodyAttributesHeaders
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
