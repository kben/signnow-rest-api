// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFolderFolderIDParams creates a new GetFolderFolderIDParams object
// with the default values initialized.
func NewGetFolderFolderIDParams() *GetFolderFolderIDParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetFolderFolderIDParams{
		Authorization: authorizationDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFolderFolderIDParamsWithTimeout creates a new GetFolderFolderIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFolderFolderIDParamsWithTimeout(timeout time.Duration) *GetFolderFolderIDParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetFolderFolderIDParams{
		Authorization: authorizationDefault,

		timeout: timeout,
	}
}

// NewGetFolderFolderIDParamsWithContext creates a new GetFolderFolderIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFolderFolderIDParamsWithContext(ctx context.Context) *GetFolderFolderIDParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetFolderFolderIDParams{
		Authorization: authorizationDefault,

		Context: ctx,
	}
}

// NewGetFolderFolderIDParamsWithHTTPClient creates a new GetFolderFolderIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFolderFolderIDParamsWithHTTPClient(client *http.Client) *GetFolderFolderIDParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetFolderFolderIDParams{
		Authorization: authorizationDefault,
		HTTPClient:    client,
	}
}

/*GetFolderFolderIDParams contains all the parameters to send to the API endpoint
for the get folder folder ID operation typically these are written to a http.Request
*/
type GetFolderFolderIDParams struct {

	/*Authorization
	  Bearer followed by access_token

	*/
	Authorization string
	/*FilterValues
	  values depend on the filter type.
	see the endpoint description for more details

	*/
	FilterValues *string
	/*Filters
	  allowed values: signing-status, documents-created, documents-updated

	*/
	Filters *string
	/*FolderID*/
	FolderID string
	/*Limit*/
	Limit *int64
	/*Offset*/
	Offset *int64
	/*Order
	  desc or asc

	*/
	Order *string
	/*Sortby
	  created or updated

	*/
	Sortby *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithTimeout(timeout time.Duration) *GetFolderFolderIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithContext(ctx context.Context) *GetFolderFolderIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithHTTPClient(client *http.Client) *GetFolderFolderIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithAuthorization(authorization string) *GetFolderFolderIDParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFilterValues adds the filterValues to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithFilterValues(filterValues *string) *GetFolderFolderIDParams {
	o.SetFilterValues(filterValues)
	return o
}

// SetFilterValues adds the filterValues to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetFilterValues(filterValues *string) {
	o.FilterValues = filterValues
}

// WithFilters adds the filters to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithFilters(filters *string) *GetFolderFolderIDParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithFolderID adds the folderID to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithFolderID(folderID string) *GetFolderFolderIDParams {
	o.SetFolderID(folderID)
	return o
}

// SetFolderID adds the folderId to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetFolderID(folderID string) {
	o.FolderID = folderID
}

// WithLimit adds the limit to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithLimit(limit *int64) *GetFolderFolderIDParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithOffset(offset *int64) *GetFolderFolderIDParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrder adds the order to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithOrder(order *string) *GetFolderFolderIDParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetOrder(order *string) {
	o.Order = order
}

// WithSortby adds the sortby to the get folder folder ID params
func (o *GetFolderFolderIDParams) WithSortby(sortby *string) *GetFolderFolderIDParams {
	o.SetSortby(sortby)
	return o
}

// SetSortby adds the sortby to the get folder folder ID params
func (o *GetFolderFolderIDParams) SetSortby(sortby *string) {
	o.Sortby = sortby
}

// WriteToRequest writes these params to a swagger request
func (o *GetFolderFolderIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.FilterValues != nil {

		// query param filter-values
		var qrFilterValues string
		if o.FilterValues != nil {
			qrFilterValues = *o.FilterValues
		}
		qFilterValues := qrFilterValues
		if qFilterValues != "" {
			if err := r.SetQueryParam("filter-values", qFilterValues); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	// path param folder_id
	if err := r.SetPathParam("folder_id", o.FolderID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.Sortby != nil {

		// query param sortby
		var qrSortby string
		if o.Sortby != nil {
			qrSortby = *o.Sortby
		}
		qSortby := qrSortby
		if qSortby != "" {
			if err := r.SetQueryParam("sortby", qSortby); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
