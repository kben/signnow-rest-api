// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUserFolderParams creates a new GetUserFolderParams object
// with the default values initialized.
func NewGetUserFolderParams() *GetUserFolderParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetUserFolderParams{
		Authorization: authorizationDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserFolderParamsWithTimeout creates a new GetUserFolderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserFolderParamsWithTimeout(timeout time.Duration) *GetUserFolderParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetUserFolderParams{
		Authorization: authorizationDefault,

		timeout: timeout,
	}
}

// NewGetUserFolderParamsWithContext creates a new GetUserFolderParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserFolderParamsWithContext(ctx context.Context) *GetUserFolderParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetUserFolderParams{
		Authorization: authorizationDefault,

		Context: ctx,
	}
}

// NewGetUserFolderParamsWithHTTPClient creates a new GetUserFolderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserFolderParamsWithHTTPClient(client *http.Client) *GetUserFolderParams {
	var (
		authorizationDefault = string("Bearer {{access_token}}")
	)
	return &GetUserFolderParams{
		Authorization: authorizationDefault,
		HTTPClient:    client,
	}
}

/*GetUserFolderParams contains all the parameters to send to the API endpoint
for the get user folder operation typically these are written to a http.Request
*/
type GetUserFolderParams struct {

	/*Authorization
	  Bearer followed by access_token

	*/
	Authorization string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user folder params
func (o *GetUserFolderParams) WithTimeout(timeout time.Duration) *GetUserFolderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user folder params
func (o *GetUserFolderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user folder params
func (o *GetUserFolderParams) WithContext(ctx context.Context) *GetUserFolderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user folder params
func (o *GetUserFolderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user folder params
func (o *GetUserFolderParams) WithHTTPClient(client *http.Client) *GetUserFolderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user folder params
func (o *GetUserFolderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get user folder params
func (o *GetUserFolderParams) WithAuthorization(authorization string) *GetUserFolderParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get user folder params
func (o *GetUserFolderParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserFolderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
