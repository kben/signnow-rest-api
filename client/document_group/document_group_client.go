// Code generated by go-swagger; DO NOT EDIT.

package document_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new document group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for document group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDocumentgroupDocumentGroupID(params *DeleteDocumentgroupDocumentGroupIDParams) (*DeleteDocumentgroupDocumentGroupIDOK, error)

	GetDocumentgroupDocumentGroupID(params *GetDocumentgroupDocumentGroupIDParams) (*GetDocumentgroupDocumentGroupIDOK, error)

	GetDocumentgroupDocumentGroupIDGroupinviteInviteID(params *GetDocumentgroupDocumentGroupIDGroupinviteInviteIDParams) (*GetDocumentgroupDocumentGroupIDGroupinviteInviteIDOK, error)

	GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvites(params *GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvitesParams) (*GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvitesOK, error)

	GetUserDocumentgroups(params *GetUserDocumentgroupsParams) (*GetUserDocumentgroupsOK, error)

	PostDocumentgroup(params *PostDocumentgroupParams) (*PostDocumentgroupOK, error)

	PostDocumentgroupDocumentGroupIDGroupinvite(params *PostDocumentgroupDocumentGroupIDGroupinviteParams) (*PostDocumentgroupDocumentGroupIDGroupinviteOK, error)

	PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinvite(params *PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinviteParams) (*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinviteOK, error)

	PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdate(params *PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdateParams) (*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdateOK, error)

	PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvites(params *PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvitesParams) (*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvitesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDocumentgroupDocumentGroupID deletes document group

  Deletes a document group. Documents within the group are not deleted. Document groups cannot be deleted while they have a group invite
*/
func (a *Client) DeleteDocumentgroupDocumentGroupID(params *DeleteDocumentgroupDocumentGroupIDParams) (*DeleteDocumentgroupDocumentGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDocumentgroupDocumentGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDocumentgroupDocumentGroupID",
		Method:             "DELETE",
		PathPattern:        "/documentgroup/{document_group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDocumentgroupDocumentGroupIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDocumentgroupDocumentGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDocumentgroupDocumentGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentgroupDocumentGroupID gets document group

  Returns document and roles information for documents in a document group. The invite_id property is null if there is no group invite for the group yet.
*/
func (a *Client) GetDocumentgroupDocumentGroupID(params *GetDocumentgroupDocumentGroupIDParams) (*GetDocumentgroupDocumentGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentgroupDocumentGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentgroupDocumentGroupID",
		Method:             "GET",
		PathPattern:        "/documentgroup/{document_group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentgroupDocumentGroupIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentgroupDocumentGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentgroupDocumentGroupID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentgroupDocumentGroupIDGroupinviteInviteID gets document group invite

  Returns invite action information for a group invite, including the status of each step and action.
Here is the list of possible invite action statuses:
1. 'created': invite or action has been created but is not waiting to be signed
2. 'pending': emails have been sent out for this invite action or step and are waiting to be viewed or signed
3. 'fulfilled': actions and steps that have been finished by singing or viewing
*/
func (a *Client) GetDocumentgroupDocumentGroupIDGroupinviteInviteID(params *GetDocumentgroupDocumentGroupIDGroupinviteInviteIDParams) (*GetDocumentgroupDocumentGroupIDGroupinviteInviteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentgroupDocumentGroupIDGroupinviteInviteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentgroupDocumentGroupIDGroupinviteInviteID",
		Method:             "GET",
		PathPattern:        "/documentgroup/{document_group_id}/groupinvite/{invite_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentgroupDocumentGroupIDGroupinviteInviteIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentgroupDocumentGroupIDGroupinviteInviteIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentgroupDocumentGroupIDGroupinviteInviteID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvites gets pending group invites

  Returns all pending invite information as well as invites already signed for a group invite for the user that makes the call. If the user making the call is the document owner, it will return pending invites for that user and ALL actions that have already been fulfilled.
*/
func (a *Client) GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvites(params *GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvitesParams) (*GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvites",
		Method:             "GET",
		PathPattern:        "/documentgroup/{document_group_id}/groupinvite/{invite_id}/pendinginvites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentgroupDocumentGroupIDGroupinviteInviteIDPendinginvites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserDocumentgroups gets document groups

  Returns back all document groups the user owns.

The call is paginated by last_updated, so offset and limit query parameters are required:
1. Limit must be greater than 0 but less than or equal to 50.
2. Offset must be 0 or greater.
*/
func (a *Client) GetUserDocumentgroups(params *GetUserDocumentgroupsParams) (*GetUserDocumentgroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserDocumentgroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserDocumentgroups",
		Method:             "GET",
		PathPattern:        "/user/documentgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserDocumentgroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserDocumentgroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserDocumentgroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentgroup creates document group

  Creates a document group from a list of document ids

All documents:
* Must be owned by the person creating the document group.
* Cannot be templates.
* Cannot already be a part of another document group (delete document group first to add them).
* At least one of the documents must have fields.




*/
func (a *Client) PostDocumentgroup(params *PostDocumentgroupParams) (*PostDocumentgroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentgroup",
		Method:             "POST",
		PathPattern:        "/documentgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentgroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentgroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentgroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentgroupDocumentGroupIDGroupinvite invites to sign document group

  Creates a multi-step invite for a document group. Each invite step consists of invite_email objects that set the email message or can disable emails all together for specific user. Invite steps also are made of the invite_action objects that need to be completed before the step is considered complete. Once all the invite_actions are completed, the next step's invite emails are sent out. When all steps have been completed, completion emails are sent out.
*/
func (a *Client) PostDocumentgroupDocumentGroupIDGroupinvite(params *PostDocumentgroupDocumentGroupIDGroupinviteParams) (*PostDocumentgroupDocumentGroupIDGroupinviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentgroupDocumentGroupIDGroupinviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentgroupDocumentGroupIDGroupinvite",
		Method:             "POST",
		PathPattern:        "/documentgroup/{document_group_id}/groupinvite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentgroupDocumentGroupIDGroupinviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentgroupDocumentGroupIDGroupinviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentgroupDocumentGroupIDGroupinvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinvite cancels document group invite

  Cancels a group invite. All documents will be unshared with invitees. Any signatures that occurred before canceling will remain on the documents.
*/
func (a *Client) PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinvite(params *PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinviteParams) (*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinvite",
		Method:             "POST",
		PathPattern:        "/documentgroup/{document_group_id}/groupinvite/{invite_id}/cancelinvite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentgroupDocumentGroupIDGroupinviteInviteIDCancelinvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdate updates document group invite

  Either replaces invitees for a particular step or updates the invite attributes for a user at a particular step
*/
func (a *Client) PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdate(params *PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdateParams) (*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdate",
		Method:             "POST",
		PathPattern:        "/documentgroup/{document_group_id}/groupinvite/{invite_id}/invitestep/{step_id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentgroupDocumentGroupIDGroupinviteInviteIDInvitestepStepIDUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvites resends document group invite

  Resends invite emails to those with pending invites for the group invite. Resend can also be used to resend invites to a single user if the user's email is specified in the POST JSON body.
*/
func (a *Client) PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvites(params *PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvitesParams) (*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvites",
		Method:             "POST",
		PathPattern:        "/documentgroup/{document_group_id}/groupinvite/{invite_id}/resendinvites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentgroupDocumentGroupIDGroupinviteInviteIDResendinvites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
