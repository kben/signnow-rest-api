// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new document API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for document API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDocumentDocumentID(params *DeleteDocumentDocumentIDParams) (*DeleteDocumentDocumentIDOK, error)

	GetDocumentDocumentID(params *GetDocumentDocumentIDParams) (*GetDocumentDocumentIDOK, error)

	GetDocumentDocumentIDDownload(params *GetDocumentDocumentIDDownloadParams) (*GetDocumentDocumentIDDownloadOK, error)

	GetDocumentDocumentIDHistoryfull(params *GetDocumentDocumentIDHistoryfullParams) (*GetDocumentDocumentIDHistoryfullOK, error)

	PostDocument(params *PostDocumentParams) (*PostDocumentOK, error)

	PostDocumentDocumentIDCustomHistoryEvent(params *PostDocumentDocumentIDCustomHistoryEventParams) (*PostDocumentDocumentIDCustomHistoryEventOK, error)

	PostDocumentDocumentIDDownloadLink(params *PostDocumentDocumentIDDownloadLinkParams) (*PostDocumentDocumentIDDownloadLinkOK, error)

	PostDocumentDocumentIDInvite(params *PostDocumentDocumentIDInviteParams) (*PostDocumentDocumentIDInviteOK, error)

	PostDocumentDocumentIDMove(params *PostDocumentDocumentIDMoveParams) (*PostDocumentDocumentIDMoveOK, error)

	PostDocumentFieldextract(params *PostDocumentFieldextractParams) (*PostDocumentFieldextractOK, error)

	PostDocumentMerge(params *PostDocumentMergeParams) (*PostDocumentMergeOK, error)

	PutDocumentDocumentID(params *PutDocumentDocumentIDParams) (*PutDocumentDocumentIDOK, error)

	PutDocumentDocumentIDFieldinvitecancel(params *PutDocumentDocumentIDFieldinvitecancelParams) (*PutDocumentDocumentIDFieldinvitecancelOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDocumentDocumentID deletes document

  Deletes a document from user's account
*/
func (a *Client) DeleteDocumentDocumentID(params *DeleteDocumentDocumentIDParams) (*DeleteDocumentDocumentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDocumentDocumentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDocumentDocumentID",
		Method:             "DELETE",
		PathPattern:        "/document/{document_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDocumentDocumentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDocumentDocumentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDocumentDocumentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentDocumentID gets document

  This endpoint returns details of specific document
*/
func (a *Client) GetDocumentDocumentID(params *GetDocumentDocumentIDParams) (*GetDocumentDocumentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentDocumentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentDocumentID",
		Method:             "GET",
		PathPattern:        "/document/{document_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentDocumentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentDocumentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentDocumentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentDocumentIDDownload downloads document

  Downloads a document
*/
func (a *Client) GetDocumentDocumentIDDownload(params *GetDocumentDocumentIDDownloadParams) (*GetDocumentDocumentIDDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentDocumentIDDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentDocumentIDDownload",
		Method:             "GET",
		PathPattern:        "/document/{document_id}/download",
		ProducesMediaTypes: []string{"application/pdf"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentDocumentIDDownloadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentDocumentIDDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentDocumentIDDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentDocumentIDHistoryfull gets document history

  Returns the history of a document.
*/
func (a *Client) GetDocumentDocumentIDHistoryfull(params *GetDocumentDocumentIDHistoryfullParams) (*GetDocumentDocumentIDHistoryfullOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentDocumentIDHistoryfullParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentDocumentIDHistoryfull",
		Method:             "GET",
		PathPattern:        "/document/{document_id}/historyfull",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentDocumentIDHistoryfullReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentDocumentIDHistoryfullOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentDocumentIDHistoryfull: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocument uploads document

  Uploads a file to user's account and returns unique id of the uploaded document. Accepts .doc, .docx, .pdf, .xls, .xlsx, .ppt, .pptx and .png file types.
*/
func (a *Client) PostDocument(params *PostDocumentParams) (*PostDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocument",
		Method:             "POST",
		PathPattern:        "/document",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentDocumentIDCustomHistoryEvent adds custom event

  Allows third party developers to add custom events to the audit log. For example, if you are using a single SignNow account to make API calls but authenticating multiple people, use this call to add a record to the audit log for that specific document that references the authentication method.
*/
func (a *Client) PostDocumentDocumentIDCustomHistoryEvent(params *PostDocumentDocumentIDCustomHistoryEventParams) (*PostDocumentDocumentIDCustomHistoryEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentDocumentIDCustomHistoryEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentDocumentIDCustomHistoryEvent",
		Method:             "POST",
		PathPattern:        "/document/{document_id}/custom_history_event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentDocumentIDCustomHistoryEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentDocumentIDCustomHistoryEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentDocumentIDCustomHistoryEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentDocumentIDDownloadLink gets document download link

  Returns a one-time use URL for anyone to download the document as a PDF.
*/
func (a *Client) PostDocumentDocumentIDDownloadLink(params *PostDocumentDocumentIDDownloadLinkParams) (*PostDocumentDocumentIDDownloadLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentDocumentIDDownloadLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentDocumentIDDownloadLink",
		Method:             "POST",
		PathPattern:        "/document/{document_id}/download/link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentDocumentIDDownloadLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentDocumentIDDownloadLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentDocumentIDDownloadLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentDocumentIDInvite sends an invite to sign

  Create and sends an invite to sign a document.
There are 2 types of signature invite:
* Free form invite - for document without fillable fields
* Role-based invite - document has at least one field
These 2 types of invite require different payloads
*/
func (a *Client) PostDocumentDocumentIDInvite(params *PostDocumentDocumentIDInviteParams) (*PostDocumentDocumentIDInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentDocumentIDInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentDocumentIDInvite",
		Method:             "POST",
		PathPattern:        "/document/{document_id}/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentDocumentIDInviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentDocumentIDInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentDocumentIDInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentDocumentIDMove moves document

  Moves a document into specified folder
*/
func (a *Client) PostDocumentDocumentIDMove(params *PostDocumentDocumentIDMoveParams) (*PostDocumentDocumentIDMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentDocumentIDMoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentDocumentIDMove",
		Method:             "POST",
		PathPattern:        "/document/{document_id}/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentDocumentIDMoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentDocumentIDMoveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentDocumentIDMove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentFieldextract uploads document with tags

  Uploads a file that contains [SignNow Text Tags](/docs/text-tags). Only .doc, .docx, and .pdf are supported
*/
func (a *Client) PostDocumentFieldextract(params *PostDocumentFieldextractParams) (*PostDocumentFieldextractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentFieldextractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentFieldextract",
		Method:             "POST",
		PathPattern:        "/document/fieldextract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentFieldextractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentFieldextractOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentFieldextract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentMerge merges documents

  Merges existing documents into one.
*/
func (a *Client) PostDocumentMerge(params *PostDocumentMergeParams) (*PostDocumentMergeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentMergeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentMerge",
		Method:             "POST",
		PathPattern:        "/document/merge",
		ProducesMediaTypes: []string{"application/pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentMergeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentMergeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentMerge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDocumentDocumentID edits document

  Updates a document by adding/overwriting fields or elements (texts, checks, signatures, hyperlinks, attachments)
*/
func (a *Client) PutDocumentDocumentID(params *PutDocumentDocumentIDParams) (*PutDocumentDocumentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDocumentDocumentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDocumentDocumentID",
		Method:             "PUT",
		PathPattern:        "/document/{document_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDocumentDocumentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDocumentDocumentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDocumentDocumentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDocumentDocumentIDFieldinvitecancel cancels invite

  Cancels an invite to a document.
*/
func (a *Client) PutDocumentDocumentIDFieldinvitecancel(params *PutDocumentDocumentIDFieldinvitecancelParams) (*PutDocumentDocumentIDFieldinvitecancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDocumentDocumentIDFieldinvitecancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDocumentDocumentIDFieldinvitecancel",
		Method:             "PUT",
		PathPattern:        "/document/{document_id}/fieldinvitecancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDocumentDocumentIDFieldinvitecancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDocumentDocumentIDFieldinvitecancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDocumentDocumentIDFieldinvitecancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
